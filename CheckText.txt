import * as React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { View, Text, Button, FlatList } from 'react-native';
import { registerRootComponent } from 'expo';  // Import from Expo to register the main component
import { useState } from 'react';

// Define the type for the navigation stack
export type RootStackParamList = {
  Home: undefined;
  AddChore: undefined;
};

// Create a Stack navigator
const Stack = createNativeStackNavigator<RootStackParamList>();

type Chore = {
  title: string;
  description?: string;
};

// HomeScreen to display the list of chores
function HomeScreen({ navigation }: any) {
  const [chores, setChores] = useState<Chore[]>([
    { title: 'Do the dishes' },
    { title: 'Sweep the floor' },
  ]);

  const addChore = (chore: Chore) => {
    setChores([...chores, chore]);
  };

  const renderItem = ({ item }: { item: Chore }) => (
    <View style={{ padding: 10 }}>
      <Text style={{ fontSize: 18 }}>{item.title}</Text>
      {item.description ? <Text>{item.description}</Text> : null}
    </View>
  );

  return (
    <View style={{ flex: 1, padding: 16 }}>
      <Text style={{ fontSize: 24, marginBottom: 16 }}>Household Chores</Text>

      {/* Display the list of chores */}
      <FlatList
        data={chores}
        keyExtractor={(item, index) => index.toString()}
        renderItem={renderItem}
      />

      {/* Button to navigate to a screen for adding new chores */}
      <Button
        title="Add New Chore"
        onPress={() => navigation.navigate('AddChore', { addChore })}
      />
    </View>
  );
}

// AddChoreScreen to submit a new chore
function AddChoreScreen({ navigation, route }: any) {
  const [choreTitle, setChoreTitle] = useState('');
  const [choreDescription, setChoreDescription] = useState('');

  // Safely access route.params with a type guard
  const addChore = route.params?.addChore || (() => {});

  const handleSubmit = () => {
    if (choreTitle.trim() !== '') {
      addChore({ title: choreTitle, description: choreDescription });
      navigation.goBack(); // Return to the home screen
    }
  };

  return (
    <View style={{ flex: 1, padding: 16 }}>
      <Text style={{ fontSize: 24, marginBottom: 16 }}>Add New Chore</Text>
      <TextInput
        style={{ borderWidth: 1, padding: 10, marginBottom: 20 }}
        placeholder="Enter chore title"
        value={choreTitle}
        onChangeText={setChoreTitle}
      />
      <TextInput
        style={{ borderWidth: 1, padding: 10, marginBottom: 20 }}
        placeholder="Enter description (optional)"
        value={choreDescription}
        onChangeText={setChoreDescription}
      />
      <Button title="Submit Chore" onPress={handleSubmit} />
    </View>
  );
}

// Main App component
function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="AddChore" component={AddChoreScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

// Register the main component (App) with Expo
registerRootComponent(App);  // This is required in Expo to make sure the App component is properly registered

export default App;
